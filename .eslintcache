[{"D:\\AllProject\\react-ts-todolist\\src\\index.tsx":"1","D:\\AllProject\\react-ts-todolist\\src\\reportWebVitals.ts":"2","D:\\AllProject\\react-ts-todolist\\src\\App.tsx":"3","D:\\AllProject\\react-ts-todolist\\src\\components\\Navbar.tsx":"4","D:\\AllProject\\react-ts-todolist\\src\\components\\TodoForm.tsx":"5","D:\\AllProject\\react-ts-todolist\\src\\components\\TodoList.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":1418,"mtime":1609625350179,"results":"10","hashOfConfig":"8"},{"size":461,"mtime":1609620786782,"results":"11","hashOfConfig":"8"},{"size":1187,"mtime":1609622597201,"results":"12","hashOfConfig":"8"},{"size":1351,"mtime":1609624602097,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wkcup0",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\AllProject\\react-ts-todolist\\src\\index.tsx",[],"D:\\AllProject\\react-ts-todolist\\src\\reportWebVitals.ts",[],"D:\\AllProject\\react-ts-todolist\\src\\App.tsx",[],"D:\\AllProject\\react-ts-todolist\\src\\components\\Navbar.tsx",[],["28","29"],"D:\\AllProject\\react-ts-todolist\\src\\components\\TodoForm.tsx",["30"],"import React, {useState, useRef} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title:string):void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n   // const [title, setTitle] = useState<string>('');\r\n/*\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value)\r\n    }\r\n*/\r\n    const ref = useRef<HTMLInputElement>(null)\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            props.onAdd(ref.current!.value);\r\n            ref.current!.value = '';\r\n          //  console.log(title);\r\n          //  setTitle('');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"input-field mt2\">\r\n            <input\r\n               // onChange={changeHandler}\r\n                onKeyPress={keyPressHandler}\r\n                ref={ref}\r\n               // value={title}\r\n                   type=\"text\"\r\n                   id=\"title\" />\r\n            <label htmlFor='title' className='active' placeholder='Введите название дела'>\r\n                Введите название дела\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","D:\\AllProject\\react-ts-todolist\\src\\components\\TodoList.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":16,"nodeType":"37","messageId":"38","endLine":1,"endColumn":24},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]